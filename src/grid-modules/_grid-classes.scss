@use "sass:math";

/*
* Container class
*/
.container {
  @include container();
}

/*
* Generate styles for row class
*/
.row {
  @include row();
}

/*
* Column classes default styles
*/
%column-styles {
  @include col();
}

/*
* Generate styles for column classes
*/
@each $breakpoint, $size in map-get($grid-settings, breakpoints) {
  @if index(map-keys(map-get($grid-settings, breakpoints)), $breakpoint) == 1 {
    @for $i from 0 through map-get($grid-settings, columns) {
      @if $i == 0 {
        .col {
          @extend %column-styles;
          @include size(auto); // By default column size is auto
        }
      } @else {
        .col-#{$i} {
          @extend %column-styles;
          @include size(math.div($i, 12));
        }
      }
    }
  } @else {
    @for $i from 1 through map-get($grid-settings, columns) {
      .col-#{$breakpoint}-#{$i} {
        @include breakpoint($breakpoint) {
          @include size(math.div($i, 12));
        }
      }

      .col-#{$breakpoint}-auto {
        @include breakpoint($breakpoint) {
          @include size(auto);
        }
      }

      [class*="col-#{$breakpoint}-"] {
        @extend %column-styles;
      }
    }
  }
}

/*
* Generate styles for offset classes
*/
@each $breakpoint, $size in map-get($grid-settings, breakpoints) {
  @if index(map-keys(map-get($grid-settings, breakpoints)), $breakpoint) == 1 {
    @for $i from 1 through map-get($grid-settings, columns) {
      @if $i != map-get($grid-settings, columns) {
        .offset-#{$i} {
          @include offset(math.div($i, 12));
        }
      }
    }
  } @else {
    @for $i from 1 through map-get($grid-settings, columns) {
      @if $i != map-get($grid-settings, columns) {
        .offset-#{$breakpoint}-#{$i} {
          @include breakpoint($breakpoint) {
            @include offset(math.div($i, 12));
          }
        }
      }
    }
    .offset-#{$breakpoint}-0 {
      @include breakpoint($breakpoint) {
        @include offset(0);
      }
    }
  }
}
